# -*- coding: utf-8 -*-
"""DL1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZD5GXB-CnnkjgfOHYXb2aqO-Kex_6bM0

**Importing Dependencies**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import sklearn.datasets
from sklearn.model_selection import train_test_split

"""Data collection and processing"""

breast_cancer_dataset = sklearn.datasets.load_breast_cancer()

print(breast_cancer_dataset)

# creating a dataframe
dataframe = pd.DataFrame(breast_cancer_dataset.data,columns = breast_cancer_dataset.feature_names)

dataframe.head()

# addding target to the dataframe
# 0 ---->   1---->
dataframe['label'] = breast_cancer_dataset.target

dataframe.tail()

dataframe.shape   #tells us the no. of columns and rows

dataframe.info()  # tells us about each column info. which type of column is that

dataframe.isnull().sum() #tells us about the null values

dataframe.describe() #tells us about the statistical measures of the data

dataframe['label'].value_counts() # checking the distribution of target variable

"""1 ---> Benign
0 ---> Malignant
"""

dataframe.groupby('label').mean()  # groupby helps to show the mean values of the label values separetly

"""Separating the features and target"""

X = dataframe.drop(columns='label',axis = 1)
Y = dataframe['label']

print(X)
print(Y)

"""Splitting the data into training data and Testing data"""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size = 0.2,random_state = 2)

print(X.shape,X_train.shape,X_test.shape)

"""Standardize the data"""

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()

X_train_std = scaler.fit_transform(X_train)
X_test_std = scaler.transform(X_test)

print(X_train_std)

"""**Building The Neural Network**

"""

#importing tensorflow and keras    <-- developed by google for creating deep learning models
import tensorflow as tf
tf.random.set_seed(3)
from tensorflow import keras

#setting up the layers of neural network
model = keras.Sequential([
    keras.layers.Flatten(input_shape=(30,)),
    keras.layers.Dense(20,activation='relu'),
    keras.layers.Dense(2,activation='sigmoid')
])

#compiling the neural networks

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

#training the model

history = model.fit(X_train_std,Y_train,validation_split=0.1,epochs=10)

"""Visulaizing accuracy and loss"""

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])

plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')

plt.legend(['training data','validation data'],loc = 'lower right')

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])

plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')

plt.legend(['training data','validation data'],loc = 'upper right')

"""Accuracy of the model on test data"""

loss,accuracy = model.evaluate(X_test_std,Y_test)
print(accuracy)

"""Build a Predictive System"""

print(X_test_std.shape)
print(X_test_std[0])

Y_pred = model.predict(X_test_std)

print(Y_pred.shape)
print(Y_pred[0])

print(Y_pred)

"""model.predict gives me the probability of each class datapoint"""

#converting probability to label

Y_pred_label = [np.argmax(i) for i in Y_pred]
print(Y_pred_label)

#predictive system

input_data = (17.99,10.38,122.8,1001,0.1184,0.2776,0.3001,0.1471,0.2419,0.07871,1.095,0.9053,8.589,153.4,0.006399,0.04904,0.05373,0.01587,0.03003,0.006193,25.38,17.33,184.6,2019,0.1622,0.6656,0.7119,0.2654,0.4601,0.1189)

#change the input data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape the numpy array as we are predicting for one data point
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

#standardize the data
std_data = scaler.transform(input_data_reshaped)

prediction = model.predict(std_data)
print(prediction)

prediction_label = [np.argmax(prediction)]
print(prediction_label)

if(prediction_label[0] == 0):
  print('The tumor is Malignant')

else:
  print('The tumor is Benign')

